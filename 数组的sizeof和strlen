#include<stdio.h>
#include<string.h>

void one_int()
{
	int a[] = { 1,2,3,4 };//int类型的字节为4，所以数组总大小为4*4=16
	printf("%d\n", sizeof(a));//16 -- sizeof(数组名)-- 总数组的大小
	printf("%d\n", sizeof(a + 0));//4 -- a+0表示数组首元素的地址，没有*，表示这是个地址 -- 地址的大小为4个字节
	printf("%d\n", sizeof(*a));//4 -- a表示首元素地址，再解引用即为首元素 -- 首元素为int类型 大小为4个字节
	printf("%d\n", sizeof(a + 1));//4 -- 数组名a表示首元素地址，+1表示第二个元素的地址 -- 地址的大小为4个字节
	printf("%d\n", sizeof(a[1]));//4 -- a[1]表示第一个元素 -- 类型为int -- int类型大小为4个字节
	printf("%d\n", sizeof(&a));//4 -- &a表示这个数组的地址 -- 地址的大小为4个字节
	printf("%d\n", sizeof(*&a));//16 -- *和&相互抵消，相当于sizeof(数组名) -- 数组总大小为 4*4=16
	printf("%d\n", sizeof(&a + 1));//4 -- &a表示整个数组的地址，整个数组的地址进行+1时，表示整个数组的地址进行+1，表示跳过这个数组都后地址 -- 地址的大小为4个字节 
	printf("%d\n", sizeof(&a[0]));//4 -- 表示第一个元素的地址 -- 地址大小为4个字节
	printf("%d\n", sizeof(&a[0] + 1));//4 -- 第一个元素的地址+1代表第二个元素的地址-- 某个元素的地址进行+-时，再未越界的情况下，表示数组的另一个元素的地址 -- 地址的大小为4个字节

}

void one_char1()
{
		//字符数组 -- 32位下char的大小为1个字节

	char carr1[] = { 'a','b','c','d','e','f' };//数组总大小为6*1=6  这种定义后面没有\0
	printf("%d\n", sizeof(carr1));//6 -- sizeof(数组名)-- 总数组的大小
	printf("%d\n", sizeof(carr1 + 0));//4 --farr+0表示首元素地址 -- 地址的大小为4
	printf("%d\n", sizeof(*carr1)); //1 -- farr表示首元素地址，再解引用表示第一个元素 -- char类型的大小为1个字节
	printf("%d\n", sizeof(carr1[1]));//1 -- 有[]表示第二个元素 -- char类型的大小为1个字节
	printf("%d\n", sizeof(&carr1));//4 -- &farr表示整个数组的地址 -- 地址的大小为4个字节
	printf("%d\n", sizeof(&carr1+1));//4 -- &farr+1表示跳过该数组的地址 -- 地址的大小为4个字节
	printf("%d\n", sizeof(&carr1[0] + 1));//4 -- &farr[0]表示第一个元素的地址，+1表示第二个元素的地址 -- 地址的大小为4个字节

//	//strlen 计算字符串长度，从某一位置出发，遇到\0结束
//	//strlen后面需要加地址

	printf("%d\n", strlen(carr1));//随机值 -- farr1为首元素的地址，但strlen需要遇到\0才能停止，不能确定farr1后面\0的位置，所以为随机值
	printf("%d\n", strlen(carr1+0));//随机值 -- farr1+0还是表示首元素地址，与第一个的随机值相同
//	printf("%d\n", strlen(*carr1));//error -- *farr1表示数组中第一个元素，不代表地址，所以非法寻址
//	printf("%d\n", strlen(carr1[1]));//error -- farr1[1]表示数组中第二个元素，不代表地址，所以非法寻址
//	printf("%d\n", strlen(&carr1));//error/随机值 -- 有些编译器表示错误，有些表示该数组地址，遇到\0才能停止，与第一个的随机值相同
//	printf("%d\n", strlen(&carr1+1));//error/随机值 -- 有些编译器表示错误，有些表示该数组地址，遇到\0才能停止，且与第一个随机值相差6
	printf("%d\n", strlen(&carr1[0]+1));//随机值 -- 表示从该数组第二个元素开始计算，该随机值与第一个随机值相差1

}

void one_char2()
{
	char carr2[] = "abcdef";//数组carr2共有七个字符（包括最后的\0）char类型的占据一个字节，所以数组共有1*7=7个字节

	printf("%d\n", sizeof(carr2));//7 -- carr2表示该数组首元素地址，sizeof(carr2)代表数组的总大小（sizeof(数组名)代表该数组的总大小）
	printf("%d\n", sizeof(carr2 + 0));//4 -- carr2+0表示首元素地址，地址的字节大小为4
	printf("%d\n", sizeof(*carr2));//1 -- *数组名表示该数组的第一个元素，则*carr2表示该数组的第一个元素 -- char类型的大小为1
	printf("%d\n", sizeof(carr2[1]));//1 -- carr2[1]表示该数组的第二个元素，类型为char
	printf("%d\n", sizeof(&carr2));//4 -- &carr2表示该数组的地址 -- 地址字节为4
	printf("%d\n", sizeof(&carr2 + 1));//4 -- &carr2+1表示跳过该数组后的地址 -- 地址的字节为4
	printf("%d\n", sizeof(&carr2[0] + 1));//4 -- 数组中元素地址+1表示下一个元素的地址 -- 地址的字节为4

	printf("%d\n", strlen(carr2));//6 -- 从carr2数组中的首位开始，数到\0,
	printf("%d\n", strlen(carr2+0));//6 -- carr2+0表示数组首元素的地址，结果相同
	//printf("%d\n", strlen(*carr2));//error -- strlen后面只能跟地址
	//printf("%d\n", strlen(carr2[1]));//error -- strlen后面只能跟地址
	//printf("%d\n", strlen(&carr2));//6/error -- 从数组首元素地址开始数 -- &carr2是一个数组指针，即char(*p)[7] = &carr2，而strlen 后面要加const char*
	//printf("%d\n", strlen(&carr2+1));//随机数/error 从数组后开始数到\0 -- &carr2+1是一个数组指针进行+-，而strlen 后面要加const char*
	printf("%d\n", strlen(&carr2[0]+1));//5 -- &carr[0]+1表示数组第二个元素，结果相差1

}

void one_char_pointer()
{
	const char* p = "abcdef";  //abcdefg是一个常量字符串，如此定义是指把该常量字符串中a的地址存放到p里面去
								//可以大致理解为数组
	printf("%d\n", sizeof(p));//4 -- sizeof(指针名)表示计算指针变量的大小，即为4
	printf("%d\n", sizeof(p + 1));//4 -- p+1表示'b'的地址 -- 地址的大小为4
	printf("%d\n", sizeof(*p));//1 -- p表示这一常量字符串中a的地址，在解引用即为a -- char类型为1
	printf("%d\n", sizeof(p[0]));//1 -- p[0] = *(p + 0)即表示第一个元素 -- 在int arr[10] 中，arr[0] = *(arr + 0)
	printf("%d\n", sizeof(&p));//4 -- &p 表示去除p的地址
	printf("%d\n", sizeof(&p + 1));//4 -- &p+1 表示p后面的地址
	printf("%d\n", sizeof(&p[0] + 1));//4 -- &p[0]+1 表示第二个元素的地址

	printf("%d\n", strlen(p));//6 -- p 表示a的地址， 从a处开始数，直到\0结束，一共6个字符
	printf("%d\n", strlen(p + 1));//5 -- p + 1表示第二个元素'b'的地址，从b开始数
	//printf("%d\n", strlen(*p));//error -- strlen后面应该接地址
	//printf("%d\n", strlen(p[0]));//error -- strlen后面应该接地址
	//printf("%d\n", strlen(&p));//error/随机值 -- p已经表示了地址，再取出p的地址，相当于二级指针，不确定从p处往后的\0
	//printf("%d\n", strlen(&p + 1));///error/随机值 -- p已经表示了地址，再取出p的地址，相当于二级指针，不确定从p处往后的\0
	printf("%d\n", strlen(&p[0] + 1));//5 -- p[0]表示第一个元素，再取其地址，+1后表示第二个元素的地址，往后共5个字符 -- p[0]相当于*(p+0),*和&相互抵消，所以其等于p+1，表示第二个元素的地址

}

void two_int()
{
	int a[3][4] = { 0 };//二维数组可以看成三行四列，a[0]表示第一行，并把第一行看作一个数组，a[0]为第一行元素第一个元素的地址，并表示这一行元素的地址，把这一行重新看作一个数组
	printf("%d\n", sizeof(a));//12*4=48 数组总大小
	printf("%d\n", sizeof(a[0][0]));//4 --  第一个元素的大小
	printf("%d\n", sizeof(a[0]));//16 -- a[0]相当于第一行的地址，把第一行看成一个数组，sizeof(数组名)表示计算该数组的总大小
	printf("%d\n", sizeof(a[0] + 1));//4 -- a[0]相当于第一行的地址，把第一行看成一个数组，a[0]表示第一行元素的首地址，+1表示第一行元素第二个元素的地址 -- 地址大小为4
	printf("%d\n", sizeof(*(a[0] + 1)));//4 （a[0]+1）表示第一行第二个元素的地址，对其解引用，得到该元素，并计算该值的大小
	printf("%d\n", sizeof(a + 1));//4 -- a为二维数组的数组名，没有sizeof(数组名)，也没有&数组名
								//把这个二维数组看成一维数组时，数组名表示首元素地址，所以在二维数组中，a表示第一行元素的首地址(把第一行看成一个元素)
								//a为第一行元素的首地址，a+1就表示第二行元素的首地址，且表示第二行这一数组的首地址
	printf("%d\n", sizeof(*(a + 1)));//16 -- (a+1)表示第二行元素的地址，对其解引用，表示这一行的元素，一行有四个元素，则大小为 4*4=16
	printf("%d\n", sizeof(&a[0] + 1));//4 -- a[0]表示第一行元素，把它想象成一个数组对其取地址并进行+1 表示整个第二行元素的地址，这个地址时第二行首元素地址
	printf("%d\n", sizeof(*(&a[0] + 1)));//16 -- (&a[0] + 1)表示整个第二行的元素，对其解引用，表示第二行元素，第二行元素的大小为 4*4=16
	printf("%d\n", sizeof(*a));//16 -- a表示整个第一行元素地址，解引用表示第一行元素，其大小为4*4=16
	printf("%d\n", sizeof(a[3]));//16 -- sizeof计算时，并不访问该地址上的内容，不参与计算，只根据其类型来计算大小，所以这里a[3]在不在无所谓
								//sizeof是根据类型计算大小
								//把二维数组想象成一维数组时，a[0],a[1]等表示该一维数组的元素，所以这里a[3]相当于a[0],所以第一行元素的大小为4*4=16

	printf("%p\n", &a[0][0]);//表示第一行第一个元素的地址
	printf("%p\n", a[0] + 1);//表示第一行第二个元素的地址
	printf("%p\n", a + 1);//表示第二行元素的地址,等于第二行首元素的地址， 把a看作一个一维数组
	printf("%p\n", &a[0] + 1);//表示第二行元素地址


}								

int main()
{
	//	//计算在32位下
	//	//数组名代表首元素地址
	//	//1.sizeof(数组名)代表该数组的总大小
	//	//2.&数组名--代表整个数组，取出的是整个数组的地址
	//  //除此之外，所有数组名表示首元素地址
	one_int();
		one_char1();
		one_char2();
	one_char_pointer();
	two_int();
	return 0;
}
